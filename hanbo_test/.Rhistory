colnames(dev_mat) <- colnames(dev_mat) %>% as.numeric()
dev_mat <- dev_mat %>% select(as.character(MovieId))
au_dev_ui <- au_mat*dev_mat
au_dev_ui <- as.matrix(au_dev_ui)
mu_ui <- matrix(rep(mu, U*I), ncol = I)
R <- mat + mu_ui + bu_ui + bi_ui + au_dev_ui
# RMSE
est_rating <- as.matrix(R)
trainRMSE[iter] <- RMSE(train, est_rating)
testRMSE[iter] <- RMSE(test, est_rating)
E = Sys.time()
cat("Iter", iter, "  RMSE for train set:", round(trainRMSE[iter], 4), "  RMSE for test set:", round(testRMSE[iter], 4), "  Time cost:", round(E-S, 2), "s\n")
iter <- iter + 1
}
# Result
ratings_est <- est_rating
return(list("User" = Users,
"Movie" = Movies,
"Rating" = ratings_est,
"Train RMSE" = trainRMSE,
"Test RMSE" = testRMSE)
)
}
result = ALS.R1R3(f = 10, lambda = 5, beta = 0.4, maxIters = 20 , data = data,
train = data_train, test = data_test)
f = 10
lambda = 5
beta = 0.4
data = data
train = data_train
test = data_test
maxIters=1
maxIters = 1
result = ALS.R1R3(f = 10, lambda = 5, beta = 0.4, maxIters = 1 , data = data,
train = data_train, test = data_test)
train = train %>% mutate(dev = ifelse(timediff>0, 1, -1)*abs(timediff)^beta)
test = test %>% mutate(dev = ifelse(timediff>0, 1, -1)*abs(timediff)^beta)
all_data = rbind(train, test)
# Factorized the Movies and User matrices
UserId <- levels(as.factor(data$userId))
U <- length(UserId)
MovieId <- levels(as.factor(data$movieId))
M <- length(MovieId)
avgRatingByUser <- data %>%
group_by(userId) %>%
summarise(avgRating = mean(rating))
avgRatingByMovie <- data %>%
group_by(movieId) %>%
summarise(avgRating = mean(rating))
Users <- matrix(c(avgRatingByUser$avgRating, runif((f-1)*U, -10, 10)), nrow=f,byrow = T)
colnames(Users) <- UserId
Movies <- matrix(c(avgRatingByMovie$avgRating, rnorm((f-1)*M, -10, 10)), nrow=f,byrow = T)
colnames(Movies) <- MovieId
bu <- matrix(rep(0, U), ncol = U)
colnames(bu) <- UserId
bi <- matrix(rep(0, M), ncol = M)
colnames(bi) <- MovieId
R <- matrix(rep(0, U*M), ncol = M)
colnames(R) <- MovieId
au <- matrix(rep(0, U), ncol = U)
colnames(au) <- UserId
# mean of all the ratings in train data set.
Ave_rating <- mean(train$rating)
trainRMSE <- rep(NA, maxIters)
testRMSE <- rep(NA, maxIters)
clusterExport(cl, "findSolve", envir = environment())
clusterExport(cl, "f", envir = environment())
clusterExport(cl, "UserId", envir = environment())
clusterExport(cl, "MovieId", envir = environment())
S = Sys.time()
Movies_cal <- rbind(rep(1,M), Movies)
colnames(Movies_cal) <- MovieId
Users_cal <- rbind(au, bu, Users)
# Fix Movie, solve User
Users_cal <- parSapply(cl, as.character(UserId), findSolve, solveBy = "Users", train = train, lambda = lambda, user_mat = Users_cal, movie_mat = Movies_cal, au = au, bu = bu, bi = bi, mu = Ave_rating, f = f, USE.NAMES = T)
au[1,] <- Users_cal[1, ]
bu[1,] <- Users_cal[2, ]
Users <- Users_cal[-c(1,2), ]
Users_cal <- rbind(rep(1,U), Users)
colnames(Users_cal) <- UserId
Movies_cal <- rbind(bi, Movies)
Movies_cal <- parSapply(cl, as.character(MovieId), findSolve, solveBy = "Movies", train = train, lambda = lambda, user_mat = Users_cal, movie_mat = Movies_cal, au = au, bu = bu, bi = bi, mu = Ave_rating, f = f, USE.NAMES = T)
# Update bi and Movies
bi[1,] <- Movies_cal[1,]
Movies <- Movies_cal[-1,]
mat <- t(Users) %*% Movies
bu_ui <- matrix(rep(NA, U*M), ncol = M)
for (i in 1:M) {
bu_ui[,i] <- t(bu)
}
bi_ui <- matrix(rep(NA, U*M), ncol = M)
for (u in 1:U) {
bi_ui[u, ] <- bi
}
au_mat <- matrix(rep(au,I),nrow=U,byrow = F)
au_mat <- matrix(rep(au,I),nrow=U,byrow = F)
rep(au,I)
au_mat <- matrix(rep(au,M),nrow=U,byrow = F)
dev_mat <- all_data %>%
unique() %>%
select(userId, movieId, dev) %>%
arrange(userId, movieId) %>%
pivot_wider(userId, names_from = movieId, values_from = dev, values_fill = list(dev = 0)) %>%
select(-1)
dev_mat <- all_data %>%
unique() %>%
select(userId, movieId, dev) %>%
arrange(userId, movieId) %>%
pivot_wider(userId, names_from = movieId, values_from = dev, values_fill = list(dev = 0)) %>%
select(-1)
colnames(dev_mat) <- colnames(dev_mat) %>% as.numeric()
dev_mat <- dev_mat %>% select(as.character(MovieId))
au_dev_ui <- au_mat*dev_mat
au_dev_ui <- as.matrix(au_dev_ui)
mu_ui <- matrix(rep(mu, U*I), ncol = I)
R <- mat + mu_ui + bu_ui + bi_ui + au_dev_ui
ALS.R1R3 <- function(f = 10, lambda = 5, beta = 0.4, maxIters = 5, data = data,
train = data_train, test = data_test){
train = train %>% mutate(dev = ifelse(timediff>0, 1, -1)*abs(timediff)^beta)
test = test %>% mutate(dev = ifelse(timediff>0, 1, -1)*abs(timediff)^beta)
all_data = rbind(train, test)
# Factorized the Movies and User matrices
UserId <- levels(as.factor(data$userId))
U <- length(UserId)
MovieId <- levels(as.factor(data$movieId))
M <- length(MovieId)
I=M
avgRatingByUser <- data %>%
group_by(userId) %>%
summarise(avgRating = mean(rating))
avgRatingByMovie <- data %>%
group_by(movieId) %>%
summarise(avgRating = mean(rating))
Users <- matrix(c(avgRatingByUser$avgRating, runif((f-1)*U, -10, 10)), nrow=f,byrow = T)
colnames(Users) <- UserId
Movies <- matrix(c(avgRatingByMovie$avgRating, rnorm((f-1)*M, -10, 10)), nrow=f,byrow = T)
colnames(Movies) <- MovieId
bu <- matrix(rep(0, U), ncol = U)
colnames(bu) <- UserId
bi <- matrix(rep(0, M), ncol = M)
colnames(bi) <- MovieId
R <- matrix(rep(0, U*M), ncol = M)
colnames(R) <- MovieId
au <- matrix(rep(0, U), ncol = U)
colnames(au) <- UserId
# mean of all the ratings in train data set.
Ave_rating <- mean(train$rating)
trainRMSE <- rep(NA, maxIters)
testRMSE <- rep(NA, maxIters)
clusterExport(cl, "findSolve", envir = environment())
clusterExport(cl, "f", envir = environment())
clusterExport(cl, "UserId", envir = environment())
clusterExport(cl, "MovieId", envir = environment())
iter <- 1
while(iter <= maxIters){
S = Sys.time()
Movies_cal <- rbind(rep(1,M), Movies)
colnames(Movies_cal) <- MovieId
Users_cal <- rbind(au, bu, Users)
# Fix Movie, solve User
Users_cal <- parSapply(cl, as.character(UserId), findSolve, solveBy = "Users", train = train, lambda = lambda, user_mat = Users_cal, movie_mat = Movies_cal, au = au, bu = bu, bi = bi, mu = Ave_rating, f = f, USE.NAMES = T)
# Update au, bu and Users
au[1,] <- Users_cal[1, ]
bu[1,] <- Users_cal[2, ]
Users <- Users_cal[-c(1,2), ]
Users_cal <- rbind(rep(1,U), Users)
colnames(Users_cal) <- UserId
Movies_cal <- rbind(bi, Movies)
# Fix User, solve Movie
Movies_cal <- parSapply(cl, as.character(MovieId), findSolve, solveBy = "Movies", train = train, lambda = lambda, user_mat = Users_cal, movie_mat = Movies_cal, au = au, bu = bu, bi = bi, mu = Ave_rating, f = f, USE.NAMES = T)
# Update bi and Movies
bi[1,] <- Movies_cal[1,]
Movies <- Movies_cal[-1,]
# Rating Matrix
mat <- t(Users) %*% Movies
bu_ui <- matrix(rep(NA, U*M), ncol = M)
for (i in 1:M) {
bu_ui[,i] <- t(bu)
}
bi_ui <- matrix(rep(NA, U*M), ncol = M)
for (u in 1:U) {
bi_ui[u, ] <- bi
}
au_mat <- matrix(rep(au,I),nrow=U,byrow = F)
dev_mat <- all_data %>%
unique() %>%
select(userId, movieId, dev) %>%
arrange(userId, movieId) %>%
pivot_wider(userId, names_from = movieId, values_from = dev, values_fill = list(dev = 0)) %>%
select(-1)
colnames(dev_mat) <- colnames(dev_mat) %>% as.numeric()
dev_mat <- dev_mat %>% select(as.character(MovieId))
au_dev_ui <- au_mat*dev_mat
au_dev_ui <- as.matrix(au_dev_ui)
mu_ui <- matrix(rep(mu, U*I), ncol = I)
R <- mat + mu_ui + bu_ui + bi_ui + au_dev_ui
# RMSE
est_rating <- as.matrix(R)
trainRMSE[iter] <- RMSE(train, est_rating)
testRMSE[iter] <- RMSE(test, est_rating)
E = Sys.time()
cat("Iter", iter, "  RMSE for train set:", round(trainRMSE[iter], 4), "  RMSE for test set:", round(testRMSE[iter], 4), "  Time cost:", round(E-S, 2), "s\n")
iter <- iter + 1
}
# Result
ratings_est <- est_rating
return(list("User" = Users,
"Movie" = Movies,
"Rating" = ratings_est,
"Train RMSE" = trainRMSE,
"Test RMSE" = testRMSE)
)
}
result = ALS.R1R3(f = 10, lambda = 5, beta = 0.4, maxIters = 1 , data = data,
train = data_train, test = data_test)
I=M
Users_cal <- parSapply(cl, as.character(UserId), findSolve, solveBy = "Users", train = train, lambda = lambda, user_mat = Users_cal, movie_mat = Movies_cal, au = au, bu = bu, bi = bi, mu = Ave_rating, f = f, USE.NAMES = T)
# Update au, bu and Users
au[1,] <- Users_cal[1, ]
bu[1,] <- Users_cal[2, ]
Users <- Users_cal[-c(1,2), ]
Users_cal <- rbind(rep(1,U), Users)
colnames(Users_cal) <- UserId
Movies_cal <- rbind(bi, Movies)
# Fix User, solve Movie
Movies_cal <- parSapply(cl, as.character(MovieId), findSolve, solveBy = "Movies", train = train, lambda = lambda, user_mat = Users_cal, movie_mat = Movies_cal, au = au, bu = bu, bi = bi, mu = Ave_rating, f = f, USE.NAMES = T)
# Update bi and Movies
bi[1,] <- Movies_cal[1,]
Movies <- Movies_cal[-1,]
# Rating Matrix
mat <- t(Users) %*% Movies
bu_ui <- matrix(rep(NA, U*M), ncol = M)
for (i in 1:M) {
bu_ui[,i] <- t(bu)
}
bi_ui <- matrix(rep(NA, U*M), ncol = M)
for (u in 1:U) {
bi_ui[u, ] <- bi
}
au_mat <- matrix(rep(au,I),nrow=U,byrow = F)
dev_mat <- all_data %>%
unique() %>%
select(userId, movieId, dev) %>%
arrange(userId, movieId) %>%
pivot_wider(userId, names_from = movieId, values_from = dev, values_fill = list(dev = 0)) %>%
select(-1)
colnames(dev_mat) <- colnames(dev_mat) %>% as.numeric()
dev_mat <- dev_mat %>% select(as.character(MovieId))
au_dev_ui <- au_mat*dev_mat
au_dev_ui <- as.matrix(au_dev_ui)
mu_ui <- matrix(rep(mu, U*I), ncol = I)
Ave_rating
ALS.R1R3 <- function(f = 10, lambda = 5, beta = 0.4, maxIters = 5, data = data,
train = data_train, test = data_test){
train = train %>% mutate(dev = ifelse(timediff>0, 1, -1)*abs(timediff)^beta)
test = test %>% mutate(dev = ifelse(timediff>0, 1, -1)*abs(timediff)^beta)
all_data = rbind(train, test)
# Factorized the Movies and User matrices
UserId <- levels(as.factor(data$userId))
U <- length(UserId)
MovieId <- levels(as.factor(data$movieId))
M <- length(MovieId)
I=M
avgRatingByUser <- data %>%
group_by(userId) %>%
summarise(avgRating = mean(rating))
avgRatingByMovie <- data %>%
group_by(movieId) %>%
summarise(avgRating = mean(rating))
Users <- matrix(c(avgRatingByUser$avgRating, runif((f-1)*U, -10, 10)), nrow=f,byrow = T)
colnames(Users) <- UserId
Movies <- matrix(c(avgRatingByMovie$avgRating, rnorm((f-1)*M, -10, 10)), nrow=f,byrow = T)
colnames(Movies) <- MovieId
bu <- matrix(rep(0, U), ncol = U)
colnames(bu) <- UserId
bi <- matrix(rep(0, M), ncol = M)
colnames(bi) <- MovieId
R <- matrix(rep(0, U*M), ncol = M)
colnames(R) <- MovieId
au <- matrix(rep(0, U), ncol = U)
colnames(au) <- UserId
# mean of all the ratings in train data set.
Ave_rating <- mean(train$rating)
mu=Ave_rating
trainRMSE <- rep(NA, maxIters)
testRMSE <- rep(NA, maxIters)
clusterExport(cl, "findSolve", envir = environment())
clusterExport(cl, "f", envir = environment())
clusterExport(cl, "UserId", envir = environment())
clusterExport(cl, "MovieId", envir = environment())
iter <- 1
while(iter <= maxIters){
S = Sys.time()
Movies_cal <- rbind(rep(1,M), Movies)
colnames(Movies_cal) <- MovieId
Users_cal <- rbind(au, bu, Users)
# Fix Movie, solve User
Users_cal <- parSapply(cl, as.character(UserId), findSolve, solveBy = "Users", train = train, lambda = lambda, user_mat = Users_cal, movie_mat = Movies_cal, au = au, bu = bu, bi = bi, mu = Ave_rating, f = f, USE.NAMES = T)
# Update au, bu and Users
au[1,] <- Users_cal[1, ]
bu[1,] <- Users_cal[2, ]
Users <- Users_cal[-c(1,2), ]
Users_cal <- rbind(rep(1,U), Users)
colnames(Users_cal) <- UserId
Movies_cal <- rbind(bi, Movies)
# Fix User, solve Movie
Movies_cal <- parSapply(cl, as.character(MovieId), findSolve, solveBy = "Movies", train = train, lambda = lambda, user_mat = Users_cal, movie_mat = Movies_cal, au = au, bu = bu, bi = bi, mu = Ave_rating, f = f, USE.NAMES = T)
# Update bi and Movies
bi[1,] <- Movies_cal[1,]
Movies <- Movies_cal[-1,]
# Rating Matrix
mat <- t(Users) %*% Movies
bu_ui <- matrix(rep(NA, U*M), ncol = M)
for (i in 1:M) {
bu_ui[,i] <- t(bu)
}
bi_ui <- matrix(rep(NA, U*M), ncol = M)
for (u in 1:U) {
bi_ui[u, ] <- bi
}
au_mat <- matrix(rep(au,I),nrow=U,byrow = F)
dev_mat <- all_data %>%
unique() %>%
select(userId, movieId, dev) %>%
arrange(userId, movieId) %>%
pivot_wider(userId, names_from = movieId, values_from = dev, values_fill = list(dev = 0)) %>%
select(-1)
colnames(dev_mat) <- colnames(dev_mat) %>% as.numeric()
dev_mat <- dev_mat %>% select(as.character(MovieId))
au_dev_ui <- au_mat*dev_mat
au_dev_ui <- as.matrix(au_dev_ui)
mu_ui <- matrix(rep(mu, U*I), ncol = I)
R <- mat + mu_ui + bu_ui + bi_ui + au_dev_ui
# RMSE
est_rating <- as.matrix(R)
trainRMSE[iter] <- RMSE(train, est_rating)
testRMSE[iter] <- RMSE(test, est_rating)
E = Sys.time()
cat("Iter", iter, "  RMSE for train set:", round(trainRMSE[iter], 4), "  RMSE for test set:", round(testRMSE[iter], 4), "  Time cost:", round(E-S, 2), "s\n")
iter <- iter + 1
}
# Result
ratings_est <- est_rating
return(list("User" = Users,
"Movie" = Movies,
"Rating" = ratings_est,
"Train RMSE" = trainRMSE,
"Test RMSE" = testRMSE)
)
}
result = ALS.R1R3(f = 10, lambda = 5, beta = 0.4, maxIters = 1 , data = data,
train = data_train, test = data_test)
result = ALS.R1R3(f = 10, lambda = 5, beta = 0.4, maxIters = 20 , data = data,
train = data_train, test = data_test)
load("C:/Users/jiaoh/Documents/GitHub/Spring2020-Project4-ads-spring2020-project4-group4/output/baseAlsCV.RData")
View(testRMSE_f)
View(testRMSE_f)
View(testRMSE_lamd)
View(testRMSE_f)
View(testRMSE_lamd)
View(trainRMSE_f)
View(testRMSE_lamd)
View(trainRMSE_f)
View(trainRMSE_lamd)
View(trainRMSE_lamd)
View(trainRMSE_lamd)
View(trainRMSE_f)
View(trainRMSE_lamd)
View(testRMSE_lamd)
View(testRMSE_f)
View(testRMSE_f)
View(testRMSE_lamd)
View(trainRMSE_f)
library(tidyverse)
library(caret)
library(parallel)
data <- read.csv("../data/ml-latest-small/ratings.csv")
set.seed(1)
# train-test split (.8/.2)
train_ind <- createDataPartition(data$userId, p=.8, list=F)
train <- data[train_ind, ]
test <- data[-train_ind, ]
RMSE <- function(rating, est_rating){
sqr_err <- function(obs){
sqr_error <- (obs[3] - est_rating[as.character(obs[1]), as.character(obs[2])])^2
return(sqr_error)
}
return(sqrt(mean(apply(rating, 1, sqr_err))))
}
RMSE_yq <- function(rating, est_rating){
est_rating <- cbind("userId"=as.integer(row.names(est_rating)), est_rating)
resultMat <- est_rating %>%
as_tibble() %>%
pivot_longer(-userId, names_to = "movieId", values_to = "est_rating") %>%
transmute(userId = as.integer(userId), movieId = as.integer(movieId), est_rating = as.double(est_rating)) %>%
inner_join(rating, by = c("userId", "movieId")) %>%
mutate(S.err = (est_rating - rating)^2)
return(sqrt(mean(resultMat$S.err)))
}
minFunc <- function(rating, matSolv, lambda){
solve(matSolv %*% t(matSolv) + lambda * diag(f)) %*% matSolv %*% rating
}
# The Function used to Find the
findSolve <- function(id, solveBy, train, lambda){
id <- as.integer(id)
# Fix Movies, solve User
if(solveBy=="Movies"){
movId <- train[train$userId==id, ]$movieId
movSolv <- Movies[, as.character(movId)]
rating <- train[train$userId==id, ]$rating
minFunc(rating = rating, matSolv = movSolv, lambda = lambda)
}
# Fix User, solve Movie
else if(solveBy=="Users"){
userId <- train[train$movieId==id, ]$userId
userSolv <- Users[, as.character(userId)]
rating <- train[train$movieId==id, ]$rating
minFunc(rating = rating, matSolv = userSolv, lambda = lambda)
}
else return("Please let matSolv be in right way")
}
ALS <- function(data, train, test, f, maxIters, lambda=5){
# Factorized the Movies and User matrices
UserId <- unique(data$userId)
U <- length(UserId)
MovieId <- unique(data$movieId)
M <- length(MovieId)
avgRatingByUser <- data %>%
group_by(userId) %>%
summarise(avgRating = mean(rating))
avgRatingByMovie <- data %>%
group_by(movieId) %>%
summarise(avgRating = mean(rating))
Users <- matrix(c(avgRatingByUser$avgRating, runif((f-1)*U, -1, 1)), nrow=f, byrow = T)
colnames(Users) <- UserId
Movies <- matrix(c(avgRatingByMovie$avgRating, rnorm((f-1)*M, -1, 1)), nrow=f, byrow = T)
colnames(Movies) <- MovieId
clusterExport(cl, "minFunc", envir = environment())
clusterExport(cl, "f", envir = environment())
clusterExport(cl, "UserId", envir = environment())
clusterExport(cl, "MovieId", envir = environment())
trainRMSE <- rep(NA, maxIters%/%3)
testRMSE <- rep(NA, maxIters%/%3)
iter <- 1
while(iter <= maxIters){
st <- Sys.time()
# Fix Movie, solve User
clusterExport(cl, "Movies", envir = environment())
clusterExport(cl, "Users", envir = environment())
Users <- parSapply(cl, as.character(UserId), findSolve, solveBy="Movies", train = train, lambda = lambda, USE.NAMES = T)
# Fix User, solve Movie
clusterExport(cl, "Movies", envir = environment())
clusterExport(cl, "Users", envir = environment())
Movies <- parSapply(cl, as.character(MovieId), findSolve, solveBy="Users", train = train, lambda = lambda, USE.NAMES = T)
# cat("Iter:", iter,  "\t Time spent:", round(Sys.time()-st, 3), "s\n")
if(iter%%3==1){
est_rating <- t(Users) %*% Movies
trainRMSE[iter%/%3+1] <- RMSE(train, est_rating)
testRMSE[iter%/%3+1] <- RMSE(test, est_rating)
}
cat(".")
if(iter==maxIters) cat("\n")
iter <- iter + 1
}
# RMSE
# est_rating <- t(Users) %*% Movies
# trainRMSE <- RMSE(train, est_rating)
# testRMSE <- RMSE(test, est_rating)
return(list("User" = Users,
"Movie" = Movies,
"Rating" = est_rating,
"TrainRMSE" = trainRMSE,
"TestRMSE" = testRMSE))
}
source("../lib/cross_validation.R")
fs <- c(5, 10, 15, 20)
lambdas <- c(.01, .1, .5, 1, 5)
cl <- makeCluster(8)
maxIter <- 15
colNM <- c(1:maxIter)[c(1:maxIter)%%3 ==1]
# maxIter vs. f
trainRMSE_f <- matrix(NA, nrow=length(fs), ncol=(maxIter%/%3))
testRMSE_f <- matrix(NA, nrow=length(fs), ncol=(maxIter%/%3))
colnames(trainRMSE_f) <- colNM
colnames(testRMSE_f) <-  colNM
row.names(trainRMSE_f) <- fs
row.names(testRMSE_f) <- fs
# maxIter vs. lambda
trainRMSE_lamd <- matrix(NA, nrow=length(lambdas), ncol=(maxIter%/%3))
testRMSE_lamd <- matrix(NA, nrow=length(lambdas), ncol=(maxIter%/%3))
colnames(trainRMSE_lamd) <- colNM
colnames(testRMSE_lamd) <-  colNM
row.names(trainRMSE_lamd) <- lambdas
row.names(testRMSE_lamd) <- lambdas
# maxIter vs. f
for(f in 1:length(fs)){
t = Sys.time()
result <- cv.functionYQ(train, K=5, f = fs[f], lambda = 1, maxIter=maxIter)
print(paste0("", "f: ", fs[f], "    lambda: ", 1, "    Time: ", Sys.time()-t))
trainRMSE_f[f, ] <- (result$mean_train_rmse)
testRMSE_f[f, ] <- (result$mean_test_rmse)
}
# maxIter vs. lambda
for(l in 1:length(lambdas)){
t = Sys.time()
result <- cv.functionYQ(train, K=5, f = 10, lambda = lambdas[l], maxIter=maxIter)
print(paste0("", "f: ", 10, "    lambda: ", lambdas[l], "    Time: ", Sys.time()-t))
trainRMSE_lamd[l, ] <- (result$mean_train_rmse)
testRMSE_lamd[l, ] <- (result$mean_test_rmse)
}
stopCluster(cl)
save(trainRMSE_f, testRMSE_f, trainRMSE_lamd, testRMSE_lamd, file="../output/baseAlsCV.RData")
