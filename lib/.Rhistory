}
else return("Please let matSolv be in right way")
}
load(file = "../output/resultALS.RData")
source("../lib/P3.R")
data=data
train=train
test=test
result=resultALS
test=KRR.Post(lambda = 1, data = data, train = train, test = test)
data
U=data$userId%>%unique()%>%length
I=data$movieId%>%unique()%>%length
## Identify Movie Matrix (X), Normalized Movie Matrix (norm.X), and ratings (r) for each user, save in lists
X <- vector(mode = "list", length = U)
norm.X <- vector(mode = "list", length = U)
r <- vector(mode = "list", length = U)
u=1
i.rated.by.u <- as.character(train[train$userId==u,]$movieId)
X[[u]] <- result$Movie[,i.rated.by.u]
norm.X[[u]] <- norm.row(t(X[[u]]))
norm.X[[u]][is.na(norm.X[[u]])] <- 0
r[[u]] <- train[train$userId==u,]$rating
i.rated.by.u
## save krr model for each user
model <- vector(mode = "list", length = U)
model[[u]] <- krr(norm.X[[u]],r[[u]], lambda = lambda)
lambda=1
## save krr model for each user
model <- vector(mode = "list", length = U)
model[[u]] <- krr(norm.X[[u]],r[[u]], lambda = lambda)
## get estimating matrix
est_rating <- matrix(NA, ncol = I, nrow=U)
est_rating
View(est_rating)
colnames(est_rating) <- levels(as.factor(data$movieId))
rownames(est_rating) <- levels(as.factor(data$userId))
est_rating[u,] <- predict(model[[u]], norm.row(t(result$Movie)))
est_rating[u,]%>%is.na()
est_rating[u,]%>%is.na()%>%sum()
data$movieId%unique()%>%length
data$movieId%>%unique()%>%length
i.rated.by.u)%>%length
i.rated.by.u%>%length
i.rated.by.u
result$Movie%>%dim
data$movieId%>%length()
data$movieId%>%unique%>%length()
data$userId%>%max
i.rated.by.u%>%length()
X[[u]]
X[[u]]%>%dim
norm.X[[u]] <- norm.row(t(X[[u]]))
norm.X[[u]] %>%dim
norm.X[[u]][is.na(norm.X[[u]])] <- 0
r[[u]] <- train[train$userId==u,]$rating
r[[u]] %>%dim
r[[u]] <- train[train$userId==u,]$rating
r[[u]]%>%dim
r[[u]]%>%length
model[[u]] <- krr(norm.X[[u]],r[[u]], lambda = lambda)
model[[u]]
load(file = "../output/resultALS.RData")
source("../lib/P3.R")
data=data
train=train
test=test
result=resultALS
test=KRR.Post(lambda = 1, data = data, train = train, test = test)
load(file = "../output/resultALS.RData")
source("../lib/P3.R")
data=data
train=train
test=test
result=resultALS
test=KRR.Post(lambda = 0.5, data = data, train = train, test = test)
test=KRR.Post(lambda = 2, data = data, train = train, test = test)
test=KRR.Post(lambda = 0.5, data = data, train = train, test = test)
lambda=1
U=data$userId%>%unique()%>%length
I=data$movieId%>%unique()%>%length
## Identify Movie Matrix (X), Normalized Movie Matrix (norm.X), and ratings (r) for each user, save in lists
## get estimating matrix
est_rating <- matrix(NA, ncol = I, nrow=U)
colnames(est_rating) <- levels(as.factor(data$movieId))
rownames(est_rating) <- levels(as.factor(data$userId))
for (u in 1:U) {
X <- NULL
norm.X <- NULL
r <-NULL
## get movie numbers rated by user u
i.rated.by.u <- as.character(train[train$userId==u,]$movieId)
X[[u]] <- result$Movie[,i.rated.by.u]
norm.X[[u]] <- norm.row(t(X[[u]]))
norm.X[[u]][is.na(norm.X[[u]])] <- 0
r[[u]] <- train[train$userId==u,]$rating
model[[u]] <- krr(norm.X[[u]],r[[u]], lambda = lambda)
est_rating[u,] <- predict(model[[u]], norm.row(t(result$Movie)))
est_rating[u,][is.na(est_rating[u, ])] <- 0
est_rating[u,] <- est_rating[u,]
}
est_rating <- matrix(NA, ncol = I, nrow=U)
colnames(est_rating) <- levels(as.factor(data$movieId))
rownames(est_rating) <- levels(as.factor(data$userId))
for (u in 1:U) {
X <- NULL
norm.X <- NULL
r <-NULL
## get movie numbers rated by user u
i.rated.by.u <- as.character(train[train$userId==u,]$movieId)
X <- result$Movie[,i.rated.by.u]
norm.X <- norm.row(t(X))
norm.X[is.na(norm.X)] <- 0
r<- train[train$userId==u,]$rating
model <- krr(norm.X,r, lambda = lambda)
est_rating[u,] <- predict(model, norm.row(t(result$Movie)))
est_rating[u,][is.na(est_rating[u, ])] <- 0
est_rating[u,] <- est_rating[u,]
}
RMSE(train, est_rating)
lambda=0.5
krr(norm.X,r, lambda = lambda)
lambda=0.5
U=data$userId%>%unique()%>%length
I=data$movieId%>%unique()%>%length
## Identify Movie Matrix (X), Normalized Movie Matrix (norm.X), and ratings (r) for each user, save in lists
## get estimating matrix
est_rating <- matrix(NA, ncol = I, nrow=U)
colnames(est_rating) <- levels(as.factor(data$movieId))
rownames(est_rating) <- levels(as.factor(data$userId))
for (u in 1:U) {
X <- NULL
norm.X <- NULL
r <-NULL
## get movie numbers rated by user u
i.rated.by.u <- as.character(train[train$userId==u,]$movieId)
X <- result$Movie[,i.rated.by.u]
norm.X <- norm.row(t(X))
norm.X[is.na(norm.X)] <- 0
r<- train[train$userId==u,]$rating
model <- krr(norm.X,r, lambda = lambda)
est_rating[u,] <- predict(model, norm.row(t(result$Movie)))
est_rating[u,][is.na(est_rating[u, ])] <- 0
est_rating[u,] <- est_rating[u,]
}
test=matrix(1:9,nrow=3)
test
norm.row(test)
test=matrix(rep(1,9),nrow=3)
norm.row(test)
test=matrix(1:9,nrow=3)
test
norm.row(test)
## Function to Normalize Each Row
norm.row <- function (m) {
std <- function (vec){
return (vec/sqrt(sum(vec^2)))
}
return ((apply(m, 2,std)))
}
norm(test)
norm.row(test)
norm.row(t(test))
RMSE(train, est_rating)
X_full <- result$Movie
norm.X_full <- norm.row(X_full)
norm.X_full[is.na(norm.X_full)] <- 0
norm.X_full%>%rownames()
norm.X_full%>%dim
## Function to Normalize Each Row
norm.row <- function (m) {
std <- function (vec){
return (vec/sqrt(sum(vec^2)))
}
return ((apply(m, 2,std)))
}
X_full <- result$Movie
X_full%>%dim
norm.X_full <- norm.row(X_full)
norm.X_full[is.na(norm.X_full)] <- 0
norm.X_full%>%dim
X_full[1:3,1:4]
test=X_full[1:3,1:4]
test
norm.row(test)
X_full <- result$Movie
norm.X_full <- t(norm.row(X_full))
norm.X_full[is.na(norm.X_full)] <- 0
test=matrix(rep(c(1:3),3),now=3)
test=matrix(rep(c(1:3),3),nrow=3)
test
norm.row(test)
## Function to Normalize Each Row
norm.row <- function (m) {
std <- function (vec){
return (vec/sqrt(sum(vec^2)))
}
return ((apply(m, 1,std)))
}
test
norm.row(test)
X_full[1:5,1]
X_full[1:5,1:2]
X_full[1:6,1:2]
X_full[1:5,1:2]
## Function to Normalize Each Row
norm.row <- function (m) {
std <- function (vec){
return (vec/sqrt(sum(vec^2)))
}
return ((apply(m, 1,std)))
}
X_full <- result$Movie
norm.X_full <- t(norm.row(X_full))
norm.X_full[is.na(norm.X_full)] <- 0
X_full%>%dim
norm.X_full%>%dim
X_full[1:5,1:2]
norm.row((X_full[1:5,1:2]))
## Function to Normalize Each Row
norm.row <- function (m) {
std <- function (vec){
return (vec/sqrt(sum(vec^2)))
}
return ((apply(m, 1,std)))
}
X_full <- result$Movie
norm.X_full <- (norm.row(X_full))
norm.X_full[is.na(norm.X_full)] <- 0
test
norm.row(test)
test=matrix(1:6,nrow=3)
test
norm.row(test)
## Function to Normalize Each Row
norm.row <- function (m) {
std <- function (vec){
return (vec/sqrt(sum(vec^2)))
}
return ((apply(m, 2,std)))
}
norm.row(test)
test
X_full <- result$Movie
norm.X_full <- t(norm.row(X_full))
norm.X_full[is.na(norm.X_full)] <- 0
X_full%>%dim
norm.X_full%>%dim
norm.X_full%>%rownames()
norm.X_full%>%rownames()[1:10]
norm.X_full%>%rownames()[1]
(norm.X_full%>%rownames())[1:3]
(norm.X_full%>%rownames())[1:0]
(norm.X_full%>%rownames())[1:100]
u=1
est_rating <- matrix(NA, ncol = I, nrow=U)
colnames(est_rating) <- levels(as.factor(data$movieId))
rownames(est_rating) <- levels(as.factor(data$userId))
X_full <- result$Movie
norm.X_full <- t(norm.row(X_full))
norm.X_full[is.na(norm.X_full)] <- 0
norm.X<-NULL
r <-NULL
## get movie numbers rated by user u
i.rated.by.u <- as.character(train[train$userId==u,]$movieId)
norm.X=norm.X_full[i.rated.by.u,]
r<- train[train$userId==u,]$rating
model <- krr(norm.X,r, lambda = lambda)
est_rating[u,] <- predict(model, norm.row(t(result$Movie)))
est_rating[u,][is.na(est_rating[u, ])] <- 0
est_rating[u,] <- est_rating[u,]
for (u in 1:U) {
norm.X<-NULL
r <-NULL
## get movie numbers rated by user u
i.rated.by.u <- as.character(train[train$userId==u,]$movieId)
norm.X=norm.X_full[i.rated.by.u,]
r<- train[train$userId==u,]$rating
model <- krr(norm.X,r, lambda = lambda)
est_rating[u,] <- predict(model, norm.row(t(result$Movie)))
est_rating[u,][is.na(est_rating[u, ])] <- 0
est_rating[u,] <- est_rating[u,]
}
lambda
rating_krr<-function(u){
norm.X<-NULL
r <-NULL
## get movie numbers rated by user u
i.rated.by.u <- as.character(train[train$userId==u,]$movieId)
norm.X=norm.X_full[i.rated.by.u,]
r<- train[train$userId==u,]$rating
model <- krr(norm.X,r, lambda = lambda)
est_rating <- predict(model, norm.row(t(result$Movie)))
est_rating[is.na(est_rating)] <- 0
return(est_rating)
}
rating_krr<-function(u){
norm.X<-NULL
r <-NULL
## get movie numbers rated by user u
i.rated.by.u <- as.character(train[train$userId==u,]$movieId)
norm.X=norm.X_full[i.rated.by.u,]
r<- train[train$userId==u,]$rating
model <- krr(norm.X,r, lambda = lambda)
est_rating <- predict(model, norm.row(t(result$Movie)))
est_rating[is.na(est_rating)] <- 0
return(est_rating)
}
sapply(1:3,rating_krr)
sapply(1:3,rating_krr)%>%dim
rating_krr<-function(u){
u=as.numeric(u)
norm.X<-NULL
r <-NULL
## get movie numbers rated by user u
i.rated.by.u <- as.character(train[train$userId==u,]$movieId)
norm.X=norm.X_full[i.rated.by.u,]
r<- train[train$userId==u,]$rating
model <- krr(norm.X,r, lambda = lambda)
est_rating <- predict(model, norm.row(t(result$Movie)))
est_rating[is.na(est_rating)] <- 0
return(est_rating)
}
sapply(as.character(1:3),rating_krr)%>%dim
sapply(as.character(1:3),rating_krr)%>%colnames()
sapply(as.character(1:3),rating_krr)
rating_krr<-function(u){
u=as.numeric(u)
norm.X<-NULL
r <-NULL
## get movie numbers rated by user u
i.rated.by.u <- as.character(train[train$userId==u,]$movieId)
norm.X=norm.X_full[i.rated.by.u,]
r<- train[train$userId==u,]$rating
model <- krr(norm.X,r, lambda = lambda)
est_rating <- predict(model, norm.row(t(result$Movie)))
est_rating[is.na(est_rating)] <- 0
return(est_rating)
}
lambda=1
U=data$userId%>%unique()%>%length
I=data$movieId%>%unique()%>%length
## Identify Movie Matrix (X), Normalized Movie Matrix (norm.X), and ratings (r) for each user, save in lists
## get estimating matrix
est_rating <- matrix(NA, ncol = I, nrow=U)
colnames(est_rating) <- levels(as.factor(data$movieId))
rownames(est_rating) <- levels(as.factor(data$userId))
X_full <- result$Movie
norm.X_full <- t(norm.row(X_full))
norm.X_full[is.na(norm.X_full)] <- 0
est_rating=sapply(as.character(1:U),rating_krr)
cl <- makeCluster(4)
clusterExport(cl, "train", envir = environment())
clusterExport(cl, "norm.X_full", envir = environment())
clusterExport(cl, "X_full", envir = environment())
# clusterExport(cl, "MovieId", envir = environment())
est_rating=parSapply(cl, as.character(1:U),rating_krr, USE.NAMES = T)
clusterExport(cl, "krr", envir = environment())
# clusterExport(cl, "MovieId", envir = environment())
est_rating=parSapply(cl, as.character(1:U),rating_krr, USE.NAMES = T)
clusterExport(cl, "lambda", envir = environment())
# clusterExport(cl, "MovieId", envir = environment())
est_rating=parSapply(cl, as.character(1:U),rating_krr, USE.NAMES = T)
rating_krr<-function(u){
u=as.numeric(u)
norm.X<-NULL
r <-NULL
## get movie numbers rated by user u
i.rated.by.u <- as.character(train[train$userId==u,]$movieId)
norm.X=norm.X_full[i.rated.by.u,]
r<- train[train$userId==u,]$rating
model <- krr(norm.X,r, lambda = lambda)
est_rating <- predict(model, norm.row(t(X_full)))
est_rating[is.na(est_rating)] <- 0
return(est_rating)
}
U=data$userId%>%unique()%>%length
I=data$movieId%>%unique()%>%length
## Identify Movie Matrix (X), Normalized Movie Matrix (norm.X), and ratings (r) for each user, save in lists
## get estimating matrix
est_rating <- matrix(NA, ncol = I, nrow=U)
colnames(est_rating) <- levels(as.factor(data$movieId))
rownames(est_rating) <- levels(as.factor(data$userId))
X_full <- result$Movie
norm.X_full <- t(norm.row(X_full))
norm.X_full[is.na(norm.X_full)] <- 0
cl <- makeCluster(4)
clusterExport(cl, "train", envir = environment())
clusterExport(cl, "norm.X_full", envir = environment())
clusterExport(cl, "X_full", envir = environment())
clusterExport(cl, "krr", envir = environment())
clusterExport(cl, "lambda", envir = environment())
# clusterExport(cl, "MovieId", envir = environment())
# clusterExport(cl, "MovieId", envir = environment())
est_rating=parSapply(cl, as.character(1:U),rating_krr, USE.NAMES = T)
rating_krr<-function(u){
u=as.numeric(u)
norm.X<-NULL
r <-NULL
## get movie numbers rated by user u
i.rated.by.u <- as.character(train[train$userId==u,]$movieId)
norm.X=norm.X_full[i.rated.by.u,]
r<- train[train$userId==u,]$rating
model <- krr(norm.X,r, lambda = lambda)
est_rating <- predict(model, norm.X_full)
est_rating[is.na(est_rating)] <- 0
return(est_rating)
}
est_rating <- matrix(NA, ncol = I, nrow=U)
colnames(est_rating) <- levels(as.factor(data$movieId))
rownames(est_rating) <- levels(as.factor(data$userId))
X_full <- result$Movie
norm.X_full <- t(norm.row(X_full))
norm.X_full[is.na(norm.X_full)] <- 0
cl <- makeCluster(4)
clusterExport(cl, "train", envir = environment())
clusterExport(cl, "norm.X_full", envir = environment())
clusterExport(cl, "X_full", envir = environment())
clusterExport(cl, "krr", envir = environment())
clusterExport(cl, "lambda", envir = environment())
# clusterExport(cl, "MovieId", envir = environment())
est_rating=parSapply(cl, as.character(1:U),rating_krr, USE.NAMES = T)
RMSE(train, est_rating)
RMSE(train, est_rating)
est_rating
est_rating%>%dim
train%>%dim
resultALS$Rating%>%dim
est_rating%>%dim
est_rating=t(est_rating)
RMSE(train, est_rating)
est_rating%>%dim
RMSE(train, est_rating)
RMSE(train, resultALS$Rating)
resultALS$Rating%>%fim
resultALS$Rating%>%dim
est_rating%>%dim
est_rating%>%rownames()
est_rating%>%colnames()
resultALS$Rating%>%colnames
est_rating%>%dim
resultALS$Rating%>%colnames%>%last(1)
resultALS$Rating%>%colnames%>%last()
resultALS$Rating%>%colnames%>%sort()
resultALS$Rating%>%colnames
est_rating%>%colnames()<-resultALS$Rating%>%colnames
colnames(est_rating)<-resultALS$Rating%>%colnames
RMSE(train, est_rating)
RMSE(train, resultALS$Rating)
RMSE(test, est_rating)
test
test <- data[-train_ind, ]
RMSE(test, est_rating)
RMSE(test, resultALS$Rating)
x1=rating_krr(1)
x2=parSapply(cl, as.character(1),rating_krr, USE.NAMES = T)
x1%>%dim
x2%>%dim
x1==x2
rating_krr<-function(u){
u=as.numeric(u)
norm.X<-NULL
r <-NULL
## get movie numbers rated by user u
i.rated.by.u <- as.character(train[train$userId==u,]$movieId)
norm.X=norm.X_full[i.rated.by.u,]
r<- train[train$userId==u,]$rating
model <- krr(norm.X,r, lambda = lambda,sigma=sigma)
est_rating <- predict(model, norm.X_full)
est_rating[is.na(est_rating)] <- 0
return(est_rating)
}
clusterExport(cl, "sigma", envir = environment())
sigma=1
sigma=1.5
est_rating=parSapply(cl, as.character(1:U),rating_krr, USE.NAMES = T)
sigma=1
est_rating=parSapply(cl, as.character(1:U),rating_krr, USE.NAMES = T)
rating_krr<-function(u){
u=as.numeric(u)
norm.X<-NULL
r <-NULL
## get movie numbers rated by user u
i.rated.by.u <- as.character(train[train$userId==u,]$movieId)
norm.X=norm.X_full[i.rated.by.u,]
r<- train[train$userId==u,]$rating
model <- krr(norm.X,r, lambda = lambda,sigma=sigma)
est_rating <- predict(model, norm.X_full)
est_rating[is.na(est_rating)] <- 0
return(est_rating)
}
sigma
sigma
clusterExport(cl, "sigma", envir = environment())
est_rating=parSapply(cl, as.character(1:U),rating_krr, USE.NAMES = T)
sigma=1.5
est_rating=parSapply(cl, as.character(1:U),rating_krr, USE.NAMES = T)
RMSE(train, est_rating)
est_rating=t(est_rating)
colnames(est_rating)<-resultALS$Rating%>%colnames
RMSE(train, est_rating)
RMSE(train, resultALS$Rating)
RMSE(test, resultALS$Rating)
RMSE(test, est_rating)
load(file = "../output/resultALS.RData")
source("../lib/P3.R")
data=data
train=train
test=test
result=resultALS
test=KRR.Post(lambda = 0.5, data = data, train = train, test = test)
test=KRR.Post(lambda = 1, data = data, train = train, test = test)
